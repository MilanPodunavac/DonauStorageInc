
entity Country {
	name String required
}

entity City {
	name String required,
	/** Base postal code of city */
    postalCode String required pattern(/[0-9]{4,5}/)
}

entity Address {
	streetName String required,
	streetCode String required pattern(/[0-9]+[a-zA-Z]?|bb|BB/),
	/** Local postal code */
	postalCode String required pattern(/[0-9]{4,5}/)
}

entity Person {
	firstName String required,
    middleName String,
	lastName String required,
	maidenName String,
    gender Gender required
}

entity LegalEntity {
	name String required,
	/** sr: Poreski identifikacioni broj (PIB) */
    taxIdentificationNumber String required unique pattern(/[0-9]{10}/),
	/** sr: Maticni broj (MB) */
    identificationNumber String required unique pattern(/[0-9]{8}/)
}

entity Employee {
	/** sr: Jedinstveni maticni broj gradjana (JMBG) */
    uniqueIdentificationNumber String required unique pattern(/[0-9]{13}/),
    birthDate ZonedDateTime required,
    disability Boolean required,
    employment Boolean,
	profilePicture ImageBlob
}

entity ContactInfo {
	email String required unique pattern (/^[^@\s]+@[^@\s]+\.[^@\s]+$/),
	phoneNumber String pattern(/((\+[0-9]{1,3})|0)[0-9]{7,10}/)
}

enum Gender {
    MALE (Male), 
	FEMALE (Female), 
	OTHER (Other)
}

entity BusinessPartner

entity BusinessContact 

entity Company 

entity BusinessYear {
	yearCode String required,
    completed Boolean required
}

entity Resource {
	name String required,
    type ResourceType required
}

enum ResourceType {
	MATERIAL (Material), 
	PRODUCT (Product), 
	HALF_PRODUCT (Half_product), 
	ENERGY_SOURCE (Energy_source), 
	WRITE_OFF (Write_off)
}

entity MeasurementUnit {
	name String required,
    abbreviation String required
}


relationship ManyToOne {
	City{country(name) required} 
	to 
	/** Cascade delete */
	Country,

    Address{city(name) required} 
	to 
	/** Cascade delete */
	City,

	Resource{unit(name) required} 
	to 
	MeasurementUnit
}

relationship OneToOne {
	/** 
	Email and phone number 
	Cascade delete
	*/ 
	Person{contactInfo(email) required} 
	to 
	/** Prevent delete */
	ContactInfo{person},

    /** 
	Email and phone number 
	Cascade delete
	*/ 
	LegalEntity{contactInfo(email) required} 
	to 
	/** Prevent delete */
	ContactInfo{legalEntity}


	/** Cascade delete */
	Employee{address required} 
	to 
	/** Prevent delete */
	Address{employee}

	/** Cascade delete */
	LegalEntity{address required} 
	to 
	/** Prevent delete */
	Address{legalEntity}

	/** Cascade delete */
	BusinessPartner{businessContact required} 
	to 
	/** Prevent delete */
	BusinessContact{businessPartner}


	/** Cascade delete */
	BusinessContact{personalInfo required} 
	to 
	/** Prevent delete */
	Person{businessContact},

	/** Cascade delete */
	Employee{personalInfo required} 
	to 
	/** Prevent delete */
	Person{employee}

	/** Cascade delete */
	Employee{user(login) required} 
	to 
	User

	/** Cascade delete */
	BusinessPartner{legalEntityInfo required} 
	to 
	/** Prevent delete */
	LegalEntity{businessPartner},

	/** Cascade delete */
	Company{legalEntityInfo required} 
	to 
	/** Prevent delete */
	LegalEntity{company}
}

relationship OneToMany {
	/** Prevent delete */
	Company{resources} 
	to 
	Resource{company required},

	/** Prevent delete */
    Company{partners} 
	to 
	BusinessPartner{company required},
    
	/** Prevent delete */
	Company{businessYears} 
	to 
	BusinessYear{company required},
    
	/** Prevent delete */
	Company{employees} 
	to 
	Employee{company required}
}

paginate Country, City, Company with infinite-scroll
paginate Employee, BusinessPartner, BusinessYear, Resource with pagination

dto * with mapstruct

service Employee, BusinessYear with serviceClass

//search * with elasticsearch

filter *
